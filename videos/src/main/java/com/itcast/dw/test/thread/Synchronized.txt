1、乐观锁和悲观锁
   乐观锁：总是认为不会发生线程并发问题
  **但是在更新时会判断其他线程在这之前有没有对数据进行修改，一般会使用版本号机制或CAS操作实现。 
   version方式：
              一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。
       当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version
       值相等时才更新，否则重试更新操作，直到更新成功。
       eg:update table set name = 'XX' ,version = version +1 where id = 'XX' and version = #{version};
   cas方式：
               即compare and swap 或者 compare and set，涉及到三个操作数，数据所在的内存值，预期值，新值。当需要更新时，判断当前
        内存值与之前取到的值是否相等，若相等，则用新值更新，若失败则重试，一般情况下是一个自旋操作，即不断的重试、
 
   悲观锁：总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加锁（读锁、写锁、行锁等），当其他线程想要访问数据时，
   都需要阻塞挂起。可以依靠数据库实现，如行锁、读锁和写锁等，都是在操作之前加锁，在Java中，synchronized的思想也是悲观锁
     
   
java中的锁

jvm垃圾回收算法：
  复制算法
  标记清除
  标记整理清除

垃圾收集器：
    对垃圾算法的实现
   Scavenge GC -- 年轻代(次收集)
   Full GC --老年代（全收集）

分代回收器：
   young gereration
     serial:串行收集器 ，复制算法
     ParNew:并行收集器，多核情况优于serial
     parallel scavenge: 提高程序并发使用率，吞吐量

   old gereration
     CMS (coucurrent Mark sweep):可以和serial 和 ParNew搭配使用
                                真正意义的并行收集器
     Serial Old: 标记整理算法，可以和所有新生代使用
     Parallel Old:和parallel scavenge使用

   G1(gabage first):面向服务端应用的收集器

jvm优化
 1、处理器的选择
 2、内存大小的分配
 3、垃圾处理器的选择

jvm性能监测工具：
  jdk bin下自带工具
   jps：
   。。。
   jvisualvm

